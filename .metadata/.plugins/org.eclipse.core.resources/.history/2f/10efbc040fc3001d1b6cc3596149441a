package edu.kh.jdbc.common;

import java.io.FileInputStream;
import java.sql.Connection;
import java.sql.DriverManager;
import java.util.Properties;

public class JDBCTemplate {
/*
 * DB연결(Connection생성),
 * 자동 커밋 off,
 * 트랜잭션 제어,
 * JDBC 객체 자원 반환 (close)
 * 
 * 이러한 JDBC 에서 반복 사용되는 코드를 모아둔 클래스
 * 
 *  *모든 필드, 메서드 static*
 *  ->어디서든지 클래스명.필드명    / 클래스명. 메서드명
 *     호출가능(별도 객체 생성 X)
 * 
 * */
	
	
	
	private static Connection conn = null;
	
	//connetion 객체 얻어오는거
	//xml 파일 안쓰고 모든 정보를 getConnection 에 담아옴
	//alt+shitf+j --> 객체 전용 주석???
	
	
	/** DB 연결 정보를 담고있는 Connection 객체 생성 및 반환 메서드
	 * @return  conn
	 */
	public static Connection getConnection() {
		
		
		try {
			
			//현재 커넥션 객체가 없을경우->새커넥션 객체를 생성
			if(conn == null || conn.isClosed()) {
				//conn.isClosed() : 커넥션이 close 상태면 true 반환
				
				Properties prop = new Properties();
				
				prop.loadFromXML( new FileInputStream("driver.xml"));
				
				String driver = prop.getProperty("driver");
				String url = prop.getProperty("url");
				String user = prop.getProperty("user");
				String password = prop.getProperty("password");
				
				Class.forName(driver);
				
				conn = DriverManager.getConnection(url, user, password);
				
				//개발자가 직접 트랜잭션 제어할 수 잇도록
				//자동커밋 비활성화(==실패했을때 자동커밋하는거 막아주는 역할)
				conn.setAutoCommit(false);
				
			}
			
		}catch(Exception e) {
			System.out.println("[Connection 생성 중 예외발생]");
			e.printStackTrace();
		}
		
		return conn;
	}
	
	
	
	
}
